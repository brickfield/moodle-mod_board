{"version":3,"file":"movecolumnsdialog.min.js","sources":["../src/movecolumnsdialog.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ModalCancel from 'core/modal_cancel';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport * as Str from 'core/str';\n\n/**\n * Generate a list of destinations that the note can be moved to.\n *\n * @param {DomNode} moveColumnControl\n * @returns {DomNode} list of destinations\n */\nconst getDestinationsList = (moveColumnControl) => {\n    // Fetch the editable columns.\n    const columns = document.querySelectorAll('.mod_board .board_column');\n    const currentColumn = moveColumnControl.closest('.board_column');\n    const columnsArray = Array.from(columns);\n    let sortorder = columnsArray.indexOf(currentColumn);\n\n    const wrapper = document.createElement('div');\n    const list = document.createElement('ul');\n    list.classList.add('move-column-dialog-destinations', 'list-unstyled');\n\n    Str.get_string('move_column_to_firstplace', 'mod_board').then((moveToFirstString) => {\n        if (sortorder !== 0) {\n            const li = document.createElement('li');\n            const link = moveLink(currentColumn.dataset.ident, 0, moveToFirstString);\n            li.appendChild(link);\n            list.appendChild(li);\n        }\n        columns.forEach(column => {\n            const sortOrder = columnsArray.indexOf(column);\n            if (currentColumn == column) {\n                return;\n            }\n            const columnName = column.querySelector('.mod_board_column_name').innerText;\n            Str.get_string('move_column_to_aftercolumn', 'mod_board', columnName).then((moveToColumnString) => {\n                const li = document.createElement('li');\n                const link = moveLink(currentColumn.dataset.ident, sortOrder, moveToColumnString);\n                li.appendChild(link);\n                list.appendChild(li);\n                return '';\n            }).catch(Notification.exception);\n        });\n        wrapper.appendChild(list);\n        return '';\n    }).catch(Notification.exception);\n    wrapper.appendChild(list);\n    return wrapper;\n};\n\n/**\n * Create a moving link.\n * @param {int} movingColumnId The column id of the column being moved\n * @param {int} sortOrder The new sort order\n * @param {string} linkString The link string\n * @returns {DomNode} link\n */\nconst moveLink = (movingColumnId, sortOrder, linkString) => {\n    const link = document.createElement('a');\n    link.setAttribute('href', '#');\n    link.dataset.movingcolumnid = movingColumnId;\n    link.dataset.sortorder = sortOrder;\n    link.innerText = linkString;\n    return link;\n};\n\n/**\n * Display the Move Modal.\n *\n * @param {DomeNode} moveColumnControl The move note control\n */\nconst displayMoveModal = (moveColumnControl) => {\n    const modalTitle = moveColumnControl.getAttribute('aria-label');\n    ModalCancel.create({\n        title: modalTitle,\n        body: getDestinationsList(moveColumnControl)\n    }).then((modal) => {\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Listen for the closemovedialog event triggerd by the links in the modal.\n        document.addEventListener('closemovedialog', () => {\n            modal.destroy();\n        });\n\n        modal.show();\n\n        return modal;\n    }).catch(Notification.exception);\n};\n\n/**\n * Initialise the move dialog.\n *\n * @param {Function} moveColumn Function from Board.js\n */\nconst init = (moveColumn) => {\n    const body = document.querySelector('body');\n    const initialized = body.classList.contains('move-column-dialog-initialized');\n    if (!initialized) {\n        document.addEventListener('click', e => {\n            const moveColumnControl = e.target.closest('.mod_column_move');\n            if (moveColumnControl) {\n                displayMoveModal(moveColumnControl);\n            }\n            const moveDestination = e.target.closest('.move-column-dialog-destinations a');\n            if (moveDestination) {\n                e.preventDefault();\n                let payload = {\n                    id: parseInt(moveDestination.dataset.movingcolumnid),\n                    sortorder: parseInt(moveDestination.dataset.sortorder)\n                };\n\n                // Trigger the moveColumn function from Board.js.\n                moveColumn(payload);\n\n                // Close the modal.\n                document.dispatchEvent(new Event('closemovedialog'));\n            }\n        });\n        document.addEventListener('keypress', e => {\n            const moveColumnControl = e.target.closest('.mod_column_move');\n            if (moveColumnControl) {\n                displayMoveModal(moveColumnControl);\n            }\n        });\n        body.classList.add('move-column-dialog-initialized');\n    }\n};\n\nexport default {\n    init: init\n};\n"],"names":["getDestinationsList","moveColumnControl","columns","document","querySelectorAll","currentColumn","closest","columnsArray","Array","from","sortorder","indexOf","wrapper","createElement","list","classList","add","Str","get_string","then","moveToFirstString","li","link","moveLink","dataset","ident","appendChild","forEach","column","sortOrder","columnName","querySelector","innerText","moveToColumnString","catch","Notification","exception","movingColumnId","linkString","setAttribute","movingcolumnid","displayMoveModal","modalTitle","getAttribute","create","title","body","modal","getRoot","on","ModalEvents","hidden","destroy","addEventListener","show","init","moveColumn","contains","e","target","moveDestination","preventDefault","payload","id","parseInt","dispatchEvent","Event"],"mappings":"u6CA0BMA,oBAAuBC,0BAEnBC,QAAUC,SAASC,iBAAiB,4BACpCC,cAAgBJ,kBAAkBK,QAAQ,iBAC1CC,aAAeC,MAAMC,KAAKP,aAC5BQ,UAAYH,aAAaI,QAAQN,qBAE/BO,QAAUT,SAASU,cAAc,OACjCC,KAAOX,SAASU,cAAc,aACpCC,KAAKC,UAAUC,IAAI,kCAAmC,iBAEtDC,IAAIC,WAAW,4BAA6B,aAAaC,MAAMC,uBACzC,IAAdV,UAAiB,OACXW,GAAKlB,SAASU,cAAc,MAC5BS,KAAOC,SAASlB,cAAcmB,QAAQC,MAAO,EAAGL,mBACtDC,GAAGK,YAAYJ,MACfR,KAAKY,YAAYL,WAErBnB,QAAQyB,SAAQC,eACNC,UAAYtB,aAAaI,QAAQiB,WACnCvB,eAAiBuB,oBAGfE,WAAaF,OAAOG,cAAc,0BAA0BC,UAClEf,IAAIC,WAAW,6BAA8B,YAAaY,YAAYX,MAAMc,2BAClEZ,GAAKlB,SAASU,cAAc,MAC5BS,KAAOC,SAASlB,cAAcmB,QAAQC,MAAOI,UAAWI,2BAC9DZ,GAAGK,YAAYJ,MACfR,KAAKY,YAAYL,IACV,MACRa,MAAMC,sBAAaC,cAE1BxB,QAAQc,YAAYZ,MACb,MACRoB,MAAMC,sBAAaC,WACtBxB,QAAQc,YAAYZ,MACbF,SAULW,SAAW,CAACc,eAAgBR,UAAWS,oBACnChB,KAAOnB,SAASU,cAAc,YACpCS,KAAKiB,aAAa,OAAQ,KAC1BjB,KAAKE,QAAQgB,eAAiBH,eAC9Bf,KAAKE,QAAQd,UAAYmB,UACzBP,KAAKU,UAAYM,WACVhB,MAQLmB,iBAAoBxC,0BAChByC,WAAazC,kBAAkB0C,aAAa,oCACtCC,OAAO,CACfC,MAAOH,WACPI,KAAM9C,oBAAoBC,qBAC3BkB,MAAM4B,QAGLA,MAAMC,UAAUC,GAAGC,sBAAYC,QAAQ,KAEnCJ,MAAMK,aAIVjD,SAASkD,iBAAiB,mBAAmB,KACzCN,MAAMK,aAGVL,MAAMO,OAECP,SACRb,MAAMC,sBAAaC,yBA0CX,CACXmB,KAnCUC,mBACJV,KAAO3C,SAAS4B,cAAc,QAChBe,KAAK/B,UAAU0C,SAAS,oCAExCtD,SAASkD,iBAAiB,SAASK,UACzBzD,kBAAoByD,EAAEC,OAAOrD,QAAQ,oBACvCL,mBACAwC,iBAAiBxC,yBAEf2D,gBAAkBF,EAAEC,OAAOrD,QAAQ,yCACrCsD,gBAAiB,CACjBF,EAAEG,qBACEC,QAAU,CACVC,GAAIC,SAASJ,gBAAgBpC,QAAQgB,gBACrC9B,UAAWsD,SAASJ,gBAAgBpC,QAAQd,YAIhD8C,WAAWM,SAGX3D,SAAS8D,cAAc,IAAIC,MAAM,wBAGzC/D,SAASkD,iBAAiB,YAAYK,UAC5BzD,kBAAoByD,EAAEC,OAAOrD,QAAQ,oBACvCL,mBACAwC,iBAAiBxC,sBAGzB6C,KAAK/B,UAAUC,IAAI"}