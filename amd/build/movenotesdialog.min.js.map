{"version":3,"file":"movenotesdialog.min.js","sources":["../src/movenotesdialog.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ModalCancel from 'core/modal_cancel';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport $ from \"jquery\";\nimport * as Str from 'core/str';\n\n/**\n * Generate a list of destinations that the note can be moved to.\n *\n * @param {DomNode} moveNoteControl\n * @returns {DomNode} list of destinations\n */\nconst getDestinationsList = (moveNoteControl) => {\n    // Fetch the editable columns.\n    const editableColumns = document.querySelectorAll('.board_column[data-locked=\"false\"]');\n    const wrapper = document.createElement('div');\n\n    // Get the data from the note being moved.\n    const movingNote = moveNoteControl.closest('.board_note');\n    const movingNoteId = movingNote.dataset.ident;\n    const movingNoteColumn = movingNote.dataset.column;\n\n    // Process each column.\n    editableColumns.forEach(column => {\n        const list = document.createElement('ul');\n        list.classList.add('move-dialog-destinations', 'list-unstyled');\n        const columnName = column.querySelector('.mod_board_column_name').innerText;\n        Str.get_string('move_to_firstitemcolumn', 'mod_board', columnName).then((stringColumn) => {\n            // Create the first item in the list, the column name.\n            const li = document.createElement('li');\n            li.classList.add('move-dialog-destination');\n            const link = moveLink(column.dataset.ident, movingNoteId, 0, movingNoteColumn, 0, stringColumn);\n            li.appendChild(link);\n            list.appendChild(li);\n\n            // Create the list of items in the column.\n            const destinations = column.querySelectorAll('.move_note');\n            let count = 0;\n            destinations.forEach(destination => {\n                count++;\n                const li = document.createElement('li');\n                li.classList.add('move-dialog-destination', 'ml-2');\n\n                // Get the name of the post from the aria-label.\n                const targetNote = $(destination.closest('.board_note'));\n                let noteTitle = targetNote.find(\".mod_board_note_heading\").html();\n                if (noteTitle === \"\") {\n                    noteTitle = count;\n                }\n                const sortOrder = targetNote.data('sortorder');\n                const noteId = targetNote.data('ident');\n                if (noteId == movingNoteId) {\n                    return;\n                }\n                Str.get_string('move_to_afterpost', 'mod_board', noteTitle).then((stringPost) => {\n                    const link = moveLink(column.dataset.ident, movingNoteId, noteId, movingNoteColumn, sortOrder + 1, stringPost);\n                    li.appendChild(link);\n                    list.appendChild(li);\n                    return '';\n                }).catch(Notification.exception);\n            });\n            wrapper.appendChild(list);\n            return '';\n        }).catch(Notification.exception);\n    });\n    return wrapper;\n};\n\n/**\n * Create a moving link.\n * @param {int} columnId The column id\n * @param {int} movingNoteId The note id of the note being moved\n * @param {int} targetNoteId The note id of the note being moved to\n * @param {int} movingNoteColumn The column id of the note being moved\n * @param {int} sortOrder The new sort order\n * @param {string} linkString The link string\n * @returns {DomNode} link\n */\nconst moveLink = (columnId, movingNoteId, targetNoteId, movingNoteColumn, sortOrder, linkString) => {\n    const link = document.createElement('a');\n    link.setAttribute('href', '#');\n    link.dataset.columnid = columnId;\n    link.dataset.movingnoteid = movingNoteId;\n    link.dataset.targetnoteid = targetNoteId;\n    link.dataset.movingnotecolumn = movingNoteColumn;\n    link.dataset.sortorder = sortOrder;\n    link.innerText = linkString;\n    return link;\n};\n\n/**\n * Display the Move Modal.\n *\n * @param {DomeNode} moveNoteControl The move note control\n */\nconst displayMoveModal = (moveNoteControl) => {\n    const modalTitle = moveNoteControl.getAttribute('aria-label');\n    ModalCancel.create({\n        title: modalTitle,\n        body: getDestinationsList(moveNoteControl)\n    }).then((modal) => {\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Listen for the closemovedialog event triggerd by the links in the modal.\n        document.addEventListener('closemovedialog', () => {\n            modal.destroy();\n        });\n\n        modal.show();\n\n        return modal;\n    }).catch(Notification.exception);\n};\n\n/**\n * Initialise the move dialog.\n * @param {Int} ownerId\n * @param {Function} moveNote Function from Board.js\n */\nconst init = (ownerId, moveNote) => {\n    const body = document.querySelector('body');\n    const initialized = body.classList.contains('move-dialog-initialized');\n    if (!initialized) {\n        document.addEventListener('click', e => {\n            const moveNoteControl = e.target.closest('.mod_board_note_controls .move_note');\n            if (moveNoteControl) {\n                displayMoveModal(moveNoteControl);\n            }\n            const moveDestination = e.target.closest('.move-dialog-destination a');\n            if (moveDestination) {\n                e.preventDefault();\n                let payload = {\n                    id: parseInt(moveDestination.dataset.movingnoteid),\n                    columnid: parseInt(moveDestination.dataset.columnid),\n                    ownerid: ownerId,\n                    sortorder: parseInt(moveDestination.dataset.sortorder)\n                };\n\n                const movingNoteColumn = parseInt(moveDestination.dataset.movingnotecolumn);\n                // The note needs to be added to the column it is being moved to. The sortorder will be updated\n                // by the board JS.\n                const movingNote = document.querySelector(\n                    `.board_note[data-ident=\"${moveDestination.dataset.movingnoteid}\"]`);\n                const toColumn = document.querySelector(\n                        `.board_column[data-ident=\"${moveDestination.dataset.columnid}\"] .board_column_content`);\n\n                if (moveDestination.dataset.sortorder == 0) {\n                    toColumn.prepend(movingNote);\n                } else {\n                    const targetNote = document.querySelector(\n                        `.board_note[data-ident=\"${moveDestination.dataset.targetnoteid}\"]`);\n                    if (targetNote) {\n                        toColumn.insertBefore(movingNote, targetNote.nextSibling);\n                    } else {\n                        toColumn.appendChild(movingNote);\n                    }\n                }\n\n                // Call the move note function from Board.js.\n                moveNote(movingNoteColumn, payload, false);\n\n                // Close the modal.\n                document.dispatchEvent(new Event('closemovedialog'));\n            }\n        });\n        document.addEventListener('keypress', e => {\n            const moveNoteControl = e.target.closest('.mod_board_note_controls .move_note');\n            if (moveNoteControl) {\n                displayMoveModal(moveNoteControl);\n            }\n        });\n        body.classList.add('move-dialog-initialized');\n    }\n};\n\nexport default {\n    init: init\n};\n"],"names":["getDestinationsList","moveNoteControl","editableColumns","document","querySelectorAll","wrapper","createElement","movingNote","closest","movingNoteId","dataset","ident","movingNoteColumn","column","forEach","list","classList","add","columnName","querySelector","innerText","Str","get_string","then","stringColumn","li","link","moveLink","appendChild","destinations","count","destination","targetNote","noteTitle","find","html","sortOrder","data","noteId","stringPost","catch","Notification","exception","columnId","targetNoteId","linkString","setAttribute","columnid","movingnoteid","targetnoteid","movingnotecolumn","sortorder","displayMoveModal","modalTitle","getAttribute","create","title","body","modal","getRoot","on","ModalEvents","hidden","destroy","addEventListener","show","init","ownerId","moveNote","contains","e","target","moveDestination","preventDefault","payload","id","parseInt","ownerid","toColumn","prepend","insertBefore","nextSibling","dispatchEvent","Event"],"mappings":"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"}