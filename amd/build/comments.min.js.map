{"version":3,"file":"comments.min.js","sources":["../src/comments.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport emojiPicker from 'core/emoji/picker';\nimport * as Str from 'core/str';\n\n/**\n * Fetch the comments for a given post.\n *\n * @param {int} noteId Number of the page.\n * @param {Node} element The element to render the comments into.\n */\nconst fetchFor = (noteId, element) => {\n    Ajax.call([\n        {\n            methodname: 'mod_board_get_comments',\n            args: {\n                noteid: noteId\n            },\n            done: (response) => {\n                return renderComments(response, element);\n            },\n            fail: Notification.exception\n        }\n    ], false);\n};\n\n/**\n * Render the comments.\n *\n * @param {Object} response fetched from the server\n * @param {DomNode} element containing the comments\n * @returns {Promise} resolved when the comments are rendered\n */\nconst renderComments = (response, element) => {\n    return Templates.renderForPromise('mod_board/commentcontainer', response)\n        .then(({html, js}) => {\n            Templates.replaceNodeContents(element, html, js);\n            return;\n        })\n        .catch();\n};\n\n/**\n * Save a comment.\n *\n * @param {Int} noteId The note id this comment is for\n * @param {String} comment The comment text\n */\nconst saveComment = (noteId, comment) => {\n    Ajax.call([\n        {\n            methodname: 'mod_board_add_comment',\n            args: {\n                noteid: noteId,\n                content: comment\n            },\n            done: () => {\n                fetchFor(noteId, document.querySelector('[data-region=\"comment-area\"]'));\n            },\n            fail: Notification.exception\n        }\n    ], false);\n};\n\n/**\n * Delete a comment.\n *\n * @param {Int} noteId The note id this comment is for\n * @param {*} commentId The comment id to delete\n */\nconst deleteComment = (noteId, commentId) => {\n    Ajax.call([\n        {\n            methodname: 'mod_board_delete_comment',\n            args: {\n                commentid: commentId\n            },\n            done: () => {\n                fetchFor(noteId, document.querySelector('[data-region=\"comment-area\"]'));\n            },\n            fail: Notification.exception\n        }\n    ], false);\n};\n\n/**\n * Initialise the comment area.\n *\n */\nconst init = () => {\n    const board = document.querySelector('.mod_board');\n    if (board.dataset.init) {\n        return;\n    }\n    board.dataset.init = 1;\n\n    Str.get_string('addcomment', 'mod_board').then(s => {\n        const style = document.createElement('style');\n        style.innerHTML = `\n            .comment-input:empty:before {\n                content: '${s}';\n            }\n        `;\n        document.head.appendChild(style);\n        return '';\n    }).fail(Notification.exception);\n\n    document.addEventListener('click', e => {\n        const commentbox = e.target.closest('[data-region=\"commentbox\"]');\n        if (!commentbox) {\n            return;\n        }\n        const noteId = parseInt(commentbox.dataset.noteid);\n        const commentInput = commentbox.querySelector('[data-region=\"commentinput\"]');\n        const commentControls = commentbox.querySelector('[data-region=\"comment-controls\"]');\n        const emojiPickerContainer = commentbox.querySelector('[data-region=\"emoji-picker-container\"]');\n\n        const postCommentClick = e.target.closest('[data-action=\"postcomment\"]');\n        const cancelCommentClick = e.target.closest('[data-action=\"cancelcomment\"]');\n        const deleteCommentClick = e.target.closest('[data-action=\"deletecomment\"]');\n        const emojiClick = e.target.closest('[data-action=\"toggle-emoji-picker\"]');\n\n        if (postCommentClick) {\n            e.preventDefault();\n            if (!postCommentClick.dataset.disabled) {\n                postCommentClick.dataset.disabled = 1;\n                saveComment(noteId, commentInput.innerHTML);\n            }\n        }\n        if (cancelCommentClick) {\n            e.preventDefault();\n            commentInput.innerHTML = '';\n            commentControls.classList.remove('show');\n        }\n        if (deleteCommentClick) {\n            e.preventDefault();\n            if (!deleteCommentClick.dataset.disabled) {\n                deleteCommentClick.dataset.disabled = 1;\n                deleteComment(noteId, deleteCommentClick.dataset.commentid);\n            }\n        }\n        if (emojiClick) {\n            e.preventDefault();\n            if (!emojiPickerContainer.dataset.init) {\n                emojiPickerContainer.dataset.init = 1;\n                emojiPicker(emojiPickerContainer, (emoji) => {\n                    commentInput.innerHTML = commentInput.innerHTML + '&nbsp;' + emoji + '&nbsp;';\n                });\n            }\n            emojiPickerContainer.classList.toggle('hidden');\n        }\n    });\n    document.addEventListener('focusin', e => {\n        const inputCommentClick = e.target.closest('[data-region=\"commentinput\"]');\n        if (inputCommentClick) {\n            e.preventDefault();\n            const commentbox = e.target.closest('[data-region=\"commentbox\"]');\n            const commentControls = commentbox.querySelector('[data-region=\"comment-controls\"]');\n            commentControls.classList.add('show');\n        }\n    });\n};\n\nexport default {\n    init: init,\n    fetchFor: fetchFor\n};\n"],"names":["fetchFor","noteId","element","call","methodname","args","noteid","done","response","renderComments","fail","Notification","exception","Templates","renderForPromise","then","_ref","html","js","replaceNodeContents","catch","init","board","document","querySelector","dataset","Str","get_string","s","style","createElement","innerHTML","head","appendChild","addEventListener","e","commentbox","target","closest","parseInt","commentInput","commentControls","emojiPickerContainer","postCommentClick","cancelCommentClick","deleteCommentClick","emojiClick","preventDefault","disabled","comment","content","saveComment","classList","remove","commentId","commentid","deleteComment","emoji","toggle","add"],"mappings":"s7CA2BMA,SAAW,CAACC,OAAQC,yBACjBC,KAAK,CACN,CACIC,WAAY,yBACZC,KAAM,CACFC,OAAQL,QAEZM,KAAOC,UACIC,eAAeD,SAAUN,SAEpCQ,KAAMC,sBAAaC,aAExB,IAUDH,eAAiB,CAACD,SAAUN,UACvBW,mBAAUC,iBAAiB,6BAA8BN,UAC3DO,MAAKC,WAACC,KAACA,KAADC,GAAOA,4BACAC,oBAAoBjB,QAASe,KAAMC,OAGhDE,qBA4HM,CACXC,KA3ES,WACHC,MAAQC,SAASC,cAAc,cACjCF,MAAMG,QAAQJ,OAGlBC,MAAMG,QAAQJ,KAAO,EAErBK,IAAIC,WAAW,aAAc,aAAaZ,MAAKa,UACrCC,MAAQN,SAASO,cAAc,gBACrCD,MAAME,2FAEcH,iCAGpBL,SAASS,KAAKC,YAAYJ,OACnB,MACRnB,KAAKC,sBAAaC,WAErBW,SAASW,iBAAiB,SAASC,UACzBC,WAAaD,EAAEE,OAAOC,QAAQ,kCAC/BF,wBAGCnC,OAASsC,SAASH,WAAWX,QAAQnB,QACrCkC,aAAeJ,WAAWZ,cAAc,gCACxCiB,gBAAkBL,WAAWZ,cAAc,oCAC3CkB,qBAAuBN,WAAWZ,cAAc,0CAEhDmB,iBAAmBR,EAAEE,OAAOC,QAAQ,+BACpCM,mBAAqBT,EAAEE,OAAOC,QAAQ,iCACtCO,mBAAqBV,EAAEE,OAAOC,QAAQ,iCACtCQ,WAAaX,EAAEE,OAAOC,QAAQ,uCAEhCK,mBACAR,EAAEY,iBACGJ,iBAAiBlB,QAAQuB,WAC1BL,iBAAiBlB,QAAQuB,SAAW,EA7EhC,EAAC/C,OAAQgD,yBACpB9C,KAAK,CACN,CACIC,WAAY,wBACZC,KAAM,CACFC,OAAQL,OACRiD,QAASD,SAEb1C,KAAM,KACFP,SAASC,OAAQsB,SAASC,cAAc,kCAE5Cd,KAAMC,sBAAaC,aAExB,IAiESuC,CAAYlD,OAAQuC,aAAaT,aAGrCa,qBACAT,EAAEY,iBACFP,aAAaT,UAAY,GACzBU,gBAAgBW,UAAUC,OAAO,SAEjCR,qBACAV,EAAEY,iBACGF,mBAAmBpB,QAAQuB,WAC5BH,mBAAmBpB,QAAQuB,SAAW,EAnEhC,EAAC/C,OAAQqD,2BACtBnD,KAAK,CACN,CACIC,WAAY,2BACZC,KAAM,CACFkD,UAAWD,WAEf/C,KAAM,KACFP,SAASC,OAAQsB,SAASC,cAAc,kCAE5Cd,KAAMC,sBAAaC,aAExB,IAwDS4C,CAAcvD,OAAQ4C,mBAAmBpB,QAAQ8B,aAGrDT,aACAX,EAAEY,iBACGL,qBAAqBjB,QAAQJ,OAC9BqB,qBAAqBjB,QAAQJ,KAAO,sBACxBqB,sBAAuBe,QAC/BjB,aAAaT,UAAYS,aAAaT,UAAY,SAAW0B,MAAQ,aAG7Ef,qBAAqBU,UAAUM,OAAO,cAG9CnC,SAASW,iBAAiB,WAAWC,OACPA,EAAEE,OAAOC,QAAQ,gCACpB,CACnBH,EAAEY,iBACiBZ,EAAEE,OAAOC,QAAQ,8BACDd,cAAc,oCACjC4B,UAAUO,IAAI,cAOtC3D,SAAUA"}